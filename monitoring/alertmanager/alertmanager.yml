global:
  resolve_timeout: 5m
  # SMTP configuration would go here if using email alerts
  # smtp:
  #   smarthost: 'smtp.example.org:587'
  #   from: 'alertmanager@example.org'
  #   auth_username: 'alertmanager'
  #   auth_password: 'password'

# The root route on which each incoming alert enters.
route:
  # The root route must not have any matchers as it is the entry point for
  # all alerts. It needs to have a receiver configured so alerts that do not
  # match any of the sub-routes are sent to someone.
  receiver: 'webhook'
  
  # The labels by which incoming alerts are grouped together. For example,
  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
  # be batched into a single group.
  group_by: ['alertname', 'instance']

  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  # This way ensures that you get multiple alerts for the same group that start
  # firing shortly after another are batched together on the first notification.
  group_wait: 30s

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: 5m

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  repeat_interval: 3h

  # All the above attributes are inherited by all child routes and can
  # overwritten on each.
  
  # Child route specifically for critical alerts
  routes:
  - receiver: 'critical-webhook'
    match:
      severity: critical
    group_wait: 10s      # Shorter wait for critical alerts
    repeat_interval: 1h  # More frequent reminders for critical alerts

  # You can also have routes for different applications/services
  - receiver: 'flask-app-webhook'
    match_re:
      alertname: '^(HighSimulatedCPULoad|HighRequestRate|CpuEndpointAbuse)$'
    group_wait: 10s
    repeat_interval: 30m

# Inhibition rules allow to mute a set of alerts given that another alert is
# firing. We use this to mute alerts that are less severe when a more severe
# alert is already firing.
inhibit_rules:
- source_match:
    severity: 'critical'
  target_match:
    severity: 'warning'
  # Apply inhibition if the alertname is the same.
  equal: ['alertname', 'instance']

receivers:
- name: 'webhook'
  webhook_configs:
  - url: 'http://localhost:8000/alert'
    send_resolved: true

- name: 'critical-webhook'
  webhook_configs:
  - url: 'http://localhost:8000/alert'
    send_resolved: true

- name: 'flask-app-webhook'
  webhook_configs:
  - url: 'http://localhost:8000/alert'
    send_resolved: true

# Optional - if you want to add Slack or other notifications
# - name: 'slack'
#   slack_configs:
#   - api_url: 'https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX'
#     channel: '#alerts'
#     send_resolved: true
